	private void selectTextFileDialogForTextButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jStartSelectTextFileDialogForTextButtonActionPerformed
		// select single file for analysis
		jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
		int returnVal = jFileChooser1.showOpenDialog(this);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = jFileChooser1.getSelectedFile();
			try {

				OCAO.setFileMain(file);
				jSelectFileToReadTextTextField.setText(file.getAbsolutePath());

			} catch (Exception ex) {
				System.out.println("problem accessing file"	+ file.getAbsolutePath());
			}
		} else {
			System.out.println("File access cancelled by user.");
		}

	}// GEN-LAST:event_jStartSelectTextFileDialogForTextButtonActionPerformed
	private void selectDirecotryTobeProcessed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
			// select directory for batch processing of documents.
		
		jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		jFileChooser1.setDialogTitle("Select Directory, please!");
		jFileChooser1.setAcceptAllFileFilterUsed(false);

		if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			File directoryPath = jFileChooser1.getSelectedFile();
			OCAO.setDirectoryForBatchProcessing(directoryPath);
			jSelectFileToReadTextTextField.setText(jFileChooser1.getSelectedFile().getAbsolutePath());

		} else {
			System.out.println("No Selection ");
		}

	}// GEN-LAST:event_jButton1ActionPerformed
	private void readFileTextAndPrintToTextPanel(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jExtractTextToTextFieldButtonActionPerformed
		// preview text content in the textpanel
		try {
			if (OCAO.getFileMain() != null	& OCAO.getFileMain().isDirectory() == false) {
				jTextForOpenCalaisToAnalyzeTextPane.read(new FileReader(OCAO.getFileMain()), null);
			}
		} catch (Exception e) {
		}

	}// GEN-LAST:event_jExtractTextToTextFieldButtonActionPerformed
	private void startOpenCalaisServiceCallButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jStartOpenCalaisServiceCallButtonActionPerformed
		// create and populate config info, decide text, file, or batch processing, and initiate the analysis.
		OCAO.setSam(new SemanticAnalysisProjectConfigurationMetadata());

		OCAO.getSam().setFileType(jTextField2.getText());
		OCAO.getSam().setIncludeSocialTags(jCheckBox2.isSelected());
		OCAO.getSam().setLocationForCallBackToSave(jTextField4.getText());
		OCAO.getSam().setLocationForExtractEntities(jTextField1.getText());
		OCAO.getSam().setMaxSizeForDocPerOCCall(jTextField5.getText());
		OCAO.getSam().setOCApiKey(jTextField3.getText());

		if (OCAO.getFileMain() != null | OCAO.getDirectoryForBatchProcessing() != null) {
			
			OCAO.initiateAndProcessOpenCalaisCall();
		} 
		else if (jTextForOpenCalaisToAnalyzeTextPane.getText().isEmpty() != true) {
				
			File tempfile = null;
			
				try {
			
				if (tempFileNameField.getText().isEmpty() != true) {
					tempfile = new File(tempFileNameField.getText());
					BufferedWriter output = new BufferedWriter(new FileWriter(tempfile));
					output.write(jTextForOpenCalaisToAnalyzeTextPane.getText());
					output.close();
				} else {
					tempfile = new File("example - file name");
					BufferedWriter output = new BufferedWriter(new FileWriter(tempfile));
					output.write(jTextForOpenCalaisToAnalyzeTextPane.getText());
					output.close();
				}
			

				OCAO.setFileMain(tempfile);

			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			OCAO.initiateAndProcessOpenCalaisCall();

		} else {
			System.out.println("Please There is nothing to select?");
		}
	}// GEN-LAST:event_jStartOpenCalaisServiceCallButtonActionPerformed

	private void printListingOfDirectoryButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed

		strbif = new StringBuilder();
		System.out.println(OCAO.getDirectoryForBatchProcessing().listFiles().length);
		buildListOfFilesAndDirectoriesRecurivlyForStringBuilder(OCAO.getDirectoryForBatchProcessing().listFiles());

		jTextForOpenCalaisToAnalyzeTextPane.setText(strbif.toString());
		strbif = null;

	}// GEN-LAST:event_jButton2ActionPerformed
	private void clearContentFromTextPanel(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton5ActionPerformed
		// this button action clears the text pane of content.
		jTextForOpenCalaisToAnalyzeTextPane.setText("");
	}// GEN-LAST:event_jButton5ActionPerformed
	private void buildListOfFilesAndDirectoriesRecurivlyForStringBuilder(File[] sourfilestuff) {
		for (File perfile : sourfilestuff) {
			if (perfile.isDirectory()) {
				strbif = strbif.append(perfile.getAbsolutePath());
				strbif = strbif.append("\n");
				buildListOfFilesAndDirectoriesRecurivlyForStringBuilder(perfile.listFiles());
			} else {
				strbif = strbif.append("-----");
				strbif = strbif.append(perfile.getAbsolutePath());
				strbif = strbif.append("\n");
			}
		}
	}

	
	
/*
 * 
 * 
 * 
 */
// openCalaisAnalysisObject = new
// SAMOpenCalaisEngine(fileTobeAnalyzied, SAPCM, true);
// int returnVal = jFileChooser1.showOpenDialog(this);
// if(returnVal == JFileChooser.APPROVE_OPTION){
//
//
// }
// filePathToAnalyzied = file.toPath();
// jSelectFileToReadTextTextField.read( new FileReader( file.getAbsolutePath()
// ), null );
// System.out.println("getCurrentDirectory(): "
// + jFileChooser1.getCurrentDirectory());
// System.out.println("getSelectedFile() : "
// + jFileChooser1.getSelectedFile());
// fileMain.getAbsolutePath()
// <editr-fold desc=" code trash from march/3/2014 "> //defaultstate="collapsed"
// for (File file : fileSource.listFiles(new FileExtensionFilter("txt"))) {
// if (file.isDirectory()) {
// // System.out.println("Directory: " + file.getName());
// processFileForBatch(file); // Calls same method again.
// } else {
//
// }
// maximumSizeForAnalsys = Integer.parseInt(sam.getMaxSizeForDocPerOCCall());
// //97000;
// CalaisConfig.UserParam.
// </editor-fold>
// <edito-fold desc=" code variables "> //defaultstate="collapsed"
// maximumSizeForAnalsys = Integer.parseInt(sam.getMaxSizeForDocPerOCCall());
// //97000;
// CalaisConfig.UserParam.
// </editor-fold>

// The semantic engine is going to have a base class constructor.
// ctor(file file)
// ctor(file directory, boon includeSubDirecotories)

// configure....
// public void ProcessContentFromTextWithOpenCalais(string[] content)
// publish the results
// module method options or precedure/scripts
// public void ConsumeTextFromRepository(file repositorylocation){process and
// prepare}
// this is used to return an array of strings in chunks to be processed by
// OpenCalai.
// The content can not be
// <editr-fold defaultstate="collapsed" desc="trash/discarded code ">
// 2.0 This is the program decides on what process to activate.
// Based on the user need, he or she will want to:
// 1. copy text to a textpanel
// 2. upload a one file
// 3. batch file processing.
// if(entity..getField)
// } else if(contentFromUI != null){
// writer = new BufferedWriter(new OutputStreamWriter(new
// FileOutputStream(fileTextPayoutLocation + "\\0" + xf + "0_" + "contentfromui"
// + ".txt"), "utf-8"));
// writer.write(response.getPayload().toString());
// else if (contentFromUI != null) {
//
// System.out.println("Processing content from UI File:");
// arrayofstringsfortesting =
// processAndChunkContentAsArrayOfStrings(contentFromUI, 97000);
// requestAnalysisFromOpenCalais(arrayofstringsfortesting);
//
// }
// writer.write(response.getPayload().toString());
// public static void ProcessFileTextAndCallOpenCalaisRestService(String
// contentToAnalyze) {
//
// ConfigureAndConnectToOpenCalais();
// arrayofstringsfortesting =
// ProcessAndPrepareContentAsAnArrayOfStrings(contentToAnalyze);
// SendArrayOfStringsToOpenCalais(arrayofstringsfortesting);
//
// }
// System.out.println("Configuring and Connecting to OpenCalais:");
// System.out.println("Creating Client and Configuration Settings for OpenCalais: More information can be foud here https://code.google.com/p/j-calais/source/browse/trunk/src/main/java/mx/bigdata/jcalais/CalaisConfig.java?r=55 ");
// public static void ProcessFileTextAndCallOpenCalaisRestService(File
// fileRecieved) {
//
// fileMain = fileRecieved;
// System.out.println("File: " + fileMain.getName() + "; ");
// System.out.println("From location: " + fileMain.getAbsolutePath() + "; ");
// System.out.println("With length of : " + fileMain.length() + "; ");
//
// ConfigureAndConnectToOpenCalais();
// arrayofstringsfortesting =
// ProcessAndPrepareContentAsAnArrayOfStrings(fileMain);
// SendArrayOfStringsToOpenCalais(arrayofstringsfortesting);
//
// }
//
// private static String[] ProcessAndPrepareContentAsAnArrayOfStrings(File
// fileMain) {
//
// //System.out.println("Preparing Data to send to OpenCalais");
// String[] arrayOfString = null;
//
// //ConvertToStringFromFile--
//
// arrayOfString = TTBC.splitByNumber(contentFromTextFile.toString(),
// maximumSizeForAnalsys);
//
// //System.out.println("Divided file of size " + contentFromTextFile.length() +
// " by the number of " + arrayOfString.length + ":");
// return arrayOfString;
//
// }
// ########################################################################################################################
//
// System.out.println("The content has been divided and now it is being sent to OpenCalais Web Service API (REST)");
// System.out.println("The number of calls will be - " +
// arrayofstringsfortesting.length);
// System.out.println("Beginning Analysis now ......................................................................................................................");
//
// try {
// } catch (java.net.SocketTimeoutException e) {
//
// System.out.println("#SocketTimeoutException Caught Here -----");
// System.out.println(configSetingsForOpenCalais.get(CalaisConfig.ConnParam.READ_TIMEOUT));
// System.out.println(configSetingsForOpenCalais.get(CalaisConfig.ConnParam.CONNECT_TIMEOUT));
// System.out.println(e.getMessage());
// System.out.println(e.getLocalizedMessage());
// System.out.println(e.getStackTrace().toString());
//
// } catch (IOException ex) {
// System.out.println("There was an issue with getting response. Response is NULL");
// System.out.println("#IOException Caught Here -----");
// System.out.println("#4444444444444444444444444444444444-");
// System.out.println("There was a issue witht he response from OpenCalais");
// System.out.println("We should really put the catch expectuions in here. ");
// System.out.println(ex.getMessage());
// System.out.println(ex.getLocalizedMessage());
// System.out.println(ex.getStackTrace().toString());
//
// }
// throw new UnsupportedOperationException("Not supported yet."); //To change
// body of generated methods, choose Tools | Templates.
// throw new UnsupportedOperationException("Not supported yet."); //To change
// body of generated methods, choose Tools | Templates.
// String textToAnalyze, String textFileNameLocationFile, String fileName
// Convert file to Test\string, file name.
// filePathToAnalyzed.getName().toString();
// failed//TTBC.readFile(filePathToAnalyzed.toString(), StandardCharsets.UTF_8);
// br = new FileReader(filePathToAnalyzed);
//
// contentFromTextFile = br.
// InputStream is = new FileInputStream(fileToAnalyzed);
// contentFromTextFile = //IOUtils(is, "UTF-8");
//
//
// contentFromTextFile = new InputStream(new FileReader(filePathToAnalyzed))
// BufferedReader br = null;
// String TextFileNameLoc = textFileNameLocationFile;
// process text
// send array of strings to OpenCalais for analysis.
// throw new UnsupportedOperationException("Not supported yet."); //To change
// body of generated methods, choose Tools | Templates.
// Create Payout File For Further Analysis. The content is in JSON.
// System.out.println("Preparing Data to send to OpenCalais");
// System.out.println("Something nowhere ");
// </editor-fold>
// try {
// if (fileTobeAnalyzied != null) {
// jTextForOpenCalaisToAnalyzeTextPane.read(new FileReader(fileTobeAnalyzied),
// null);
// }
//
// } catch (Exception e) {
// }
// arrayofstringsfortesting = ;//processAndChunkContentAsArrayOfStrings( 97000);
// , countryDirectoryName.getName().toString(),
// textFromCountryFileName.getName().toString());
// fileTobeAnalyzied = file;
// openCalaisAnalysisObject.setFileMain(file);
// System.out.println(fileTobeAnalyzied.isDirectory());
// private static String[] arrayofstringsfortesting = null;
// need to implement for batch constructor
// logFileWriter;
// mulitople files are bing selected at the directory level
// = new SemanticAnalysisProjectConfigurationMetadata();
// openCalaisAnalysisObject.getSam()
// fileTobeAnalyzied.isDirectory()
// ------------> now i need to send this along with the file/directory to
// OpenCalais Semantic Engine Analysis
// if (openCalaisAnalysisObject.getFileMain() fileTobeAnalyzied.isDirectory() !=
// true) {
//
// openCalaisAnalysisObject = new SAMOpenCalaisEngine(fileTobeAnalyzied, SAPCM);
// private File fileTobeAnalyzied = null;
// private SemanticAnalysisProjectConfigurationMetadata SAPCM = null;
// // ConfigureAndConnectToOpenCalais();
// fileLogReport = fileLogReport.concat("\n File: " + fileMain.getName() +
// "; ");
// fileLogReport = fileLogReport.concat("\n " + "From location: " +
// fileMain.getAbsolutePath() + "; ");
// fileLogReport = fileLogReport.concat("\n " + "With length of : " +
// fileMain.length() + "; ");
// ConfigureAndConnectToOpenCalais();
// ##################################################################################
// for (File fileFromBatch : ) {
// <edtor-fold desc=" need to configure  ">
// for (File textFromCountryFileName : fileFromBatch.listFiles(new
// FileExtensionFilter("txt"))) {
// }
// #####################################################################################
// //
// </editor-fold>
//
// public SAMOpenCalaisEngine(File file,
// SemanticAnalysisProjectConfigurationMetadata sapcm1) {
//
// // fileMain = file;
// // sam = sapcm1;
//
//
// }
//
// public SAMOpenCalaisEngine(File directoryLocationForBatchProcessing,
// SemanticAnalysisProjectConfigurationMetadata sapcm1, boolean
// includeSubDirectories) {
//
// // directoryForBatchProcessing = directoryLocationForBatchProcessing;
// // sam = sapcm1;
// }
// ////////////////////////////////////////
// private static String fileLogReport = null;

// System.out.println("stringbuliderdirectory" + strbif.toString());
// shortName = shortName.c" ------" +oncat(" ------" + perfile.getName());
// shortName = shortName.concat();
// System.out.println(perfile.getName());
// File[] listofDirecotyrandfile =
// openCalaisAnalysisObject.getDirectoryForBatchProcessing().listFiles();
// System.out.println(sourfilestuff[0].)
// save json returned from ##########################################
// if (fileMain != null) {
// }*/