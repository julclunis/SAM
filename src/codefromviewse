	private void selectTextFileDialogForTextButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jStartSelectTextFileDialogForTextButtonActionPerformed
		// select single file for analysis
		jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
		int returnVal = jFileChooser1.showOpenDialog(this);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = jFileChooser1.getSelectedFile();
			try {

				OCAO.setFileMain(file);
				jSelectFileToReadTextTextField.setText(file.getAbsolutePath());

			} catch (Exception ex) {
				System.out.println("problem accessing file"	+ file.getAbsolutePath());
			}
		} else {
			System.out.println("File access cancelled by user.");
		}

	}// GEN-LAST:event_jStartSelectTextFileDialogForTextButtonActionPerformed
	private void selectDirecotryTobeProcessed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
			// select directory for batch processing of documents.
		
		jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		jFileChooser1.setDialogTitle("Select Directory, please!");
		jFileChooser1.setAcceptAllFileFilterUsed(false);

		if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			File directoryPath = jFileChooser1.getSelectedFile();
			OCAO.setDirectoryForBatchProcessing(directoryPath);
			jSelectFileToReadTextTextField.setText(jFileChooser1.getSelectedFile().getAbsolutePath());

		} else {
			System.out.println("No Selection ");
		}

	}// GEN-LAST:event_jButton1ActionPerformed
	private void readFileTextAndPrintToTextPanel(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jExtractTextToTextFieldButtonActionPerformed
		// preview text content in the textpanel
		try {
			if (OCAO.getFileMain() != null	& OCAO.getFileMain().isDirectory() == false) {
				jTextForOpenCalaisToAnalyzeTextPane.read(new FileReader(OCAO.getFileMain()), null);
			}
		} catch (Exception e) {
		}

	}// GEN-LAST:event_jExtractTextToTextFieldButtonActionPerformed
	private void startOpenCalaisServiceCallButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jStartOpenCalaisServiceCallButtonActionPerformed
		// create and populate config info, decide text, file, or batch processing, and initiate the analysis.
		OCAO.setSam(new SemanticAnalysisProjectConfigurationMetadata());

		OCAO.getSam().setFileType(jTextField2.getText());
		OCAO.getSam().setIncludeSocialTags(jCheckBox2.isSelected());
		OCAO.getSam().setLocationForCallBackToSave(jTextField4.getText());
		OCAO.getSam().setLocationForExtractEntities(jTextField1.getText());
		OCAO.getSam().setMaxSizeForDocPerOCCall(jTextField5.getText());
		OCAO.getSam().setOCApiKey(jTextField3.getText());

		if (OCAO.getFileMain() != null | OCAO.getDirectoryForBatchProcessing() != null) {
			
			OCAO.initiateAndProcessOpenCalaisCall();
		} 
		else if (jTextForOpenCalaisToAnalyzeTextPane.getText().isEmpty() != true) {
				
			File tempfile = null;
			
				try {
			
				if (tempFileNameField.getText().isEmpty() != true) {
					tempfile = new File(tempFileNameField.getText());
					BufferedWriter output = new BufferedWriter(new FileWriter(tempfile));
					output.write(jTextForOpenCalaisToAnalyzeTextPane.getText());
					output.close();
				} else {
					tempfile = new File("example - file name");
					BufferedWriter output = new BufferedWriter(new FileWriter(tempfile));
					output.write(jTextForOpenCalaisToAnalyzeTextPane.getText());
					output.close();
				}
			

				OCAO.setFileMain(tempfile);

			} catch (Exception e) {
				System.out.println(e.getMessage());
			}

			OCAO.initiateAndProcessOpenCalaisCall();

		} else {
			System.out.println("Please There is nothing to select?");
		}
	}// GEN-LAST:event_jStartOpenCalaisServiceCallButtonActionPerformed

	private void printListingOfDirectoryButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed

		strbif = new StringBuilder();
		System.out.println(OCAO.getDirectoryForBatchProcessing().listFiles().length);
		buildListOfFilesAndDirectoriesRecurivlyForStringBuilder(OCAO.getDirectoryForBatchProcessing().listFiles());

		jTextForOpenCalaisToAnalyzeTextPane.setText(strbif.toString());
		strbif = null;

	}// GEN-LAST:event_jButton2ActionPerformed
	private void clearContentFromTextPanel(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton5ActionPerformed
		// this button action clears the text pane of content.
		jTextForOpenCalaisToAnalyzeTextPane.setText("");
	}// GEN-LAST:event_jButton5ActionPerformed
	private void buildListOfFilesAndDirectoriesRecurivlyForStringBuilder(File[] sourfilestuff) {
		for (File perfile : sourfilestuff) {
			if (perfile.isDirectory()) {
				strbif = strbif.append(perfile.getAbsolutePath());
				strbif = strbif.append("\n");
				buildListOfFilesAndDirectoriesRecurivlyForStringBuilder(perfile.listFiles());
			} else {
				strbif = strbif.append("-----");
				strbif = strbif.append(perfile.getAbsolutePath());
				strbif = strbif.append("\n");
			}
		}
	}
